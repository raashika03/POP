#lang sicp
(define-syntax delay
  (syntax-rules ()
    ((delay expr) (lambda () expr))))
(define (force promise) (promise))
(define-syntax cons-stream
  (syntax-rules ()
    ((cons-stream a b) (cons a (delay b)))))
(define (stream-car s)
  (car s))
(define (stream-cdr s)
  (force (cdr s)))
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
(define Fu '())
(define Pooh '())

(define (whowin calls1 calls2 round c1 c2)
  (define mov1 (stream-car calls1))
  (define mov2 (stream-car calls2))
  (define s1 (stream-cdr calls1))
  (define s2 (stream-cdr calls2))
  (if (> round 0)
      (cond ((or (and (= 1 mov1) (= 2 mov2)) (and (= 2 mov1) (= 4 mov2)))
             (whowin s1 s2 (- round 1) (+ c1 1) c2))
            ((and (= 3 mov1) (or (= 1 mov2) (= 2 mov2)))
             (whowin s1 s2 (- round 1) (+ c1 1) c2))
            ((and (= 4 mov1) (or (= 1 mov2) (= 3 mov2)))
             (whowin s1 s2 (- round 1) (+ c1 1) c2))
            ((= mov1 mov2)
             (whowin s1 s2 (- round 1) c1 c2))
            (else (whowin s1 s2 (- round 1) c1 (+ c2 1))))
      (cond ((> c1 c2) 1)
            ((< c1 c2) 2)
            (else 0))))

(define (count s move)
  (cond ((null? s) 0)
        ((= (stream-car s) move) (+ 1 (count (stream-cdr s) move)))
        (else (count (stream-cdr s) move))))
(define (favorite-move s)
  (define c1 (count s 1))
  (define c2 (count s 2))
  (define c3 (count s 3))
  (define c4 (count s 4))
  (if (>= c4 c3)
      (if (>= c2 c1)
          (if (>= c4 c2) 4 2) (if (>= c4 c1) 4 1))
      (if (>= c2 c1)
          (if (>= c3 c2) 3 2) (if (>= c3 c1) 3 1))))

(define (getnextmove s stra)
  (if (= stra 1)
      (stream-car s)
      (cond ((= (favorite-move s) 1) 4)
            ((= (favorite-move s) 2) 3)
            ((= (favorite-move s) 3) 4)
            ((= (favorite-move s) 4) 2))))

(define (play1 s1 s2 stra1 stra2)
  (define nm1 (getnextmove s2 stra1))
  (define nm2 (getnextmove s1 stra2))
  (cons-stream (cons (stream-car s1) (stream-car s2))
               (play1 (cons-stream nm1 s1) (cons-stream nm2 s2) stra1 stra2)))

(define (seqofcalls calls sel)
  (cons-stream (sel (stream-car calls)) (seqofcalls (stream-cdr calls) sel)))

(define (play stra1 stra2 mov1 rounds)
  (define pair (play1 (cons-stream mov1 '())
                    (cons-stream 4 '()) stra1 stra2))
  (set! Fu (seqofcalls pair car))
  (set! Pooh (seqofcalls pair cdr))
  (whowin Fu Pooh rounds 0 0))